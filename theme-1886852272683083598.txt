<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PubMed DrugLens Pro</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/luxon@3.4.4/build/global/luxon.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.2.0/dist/chartjs-adapter-luxon.min.js"></script>
  <style>
    :root {
      --primary-color: #3366cc;
      --primary-dark: #254a99;
      --secondary-color: #1E2761;
      --light-bg: #f8f9fa;
      --text-color: #2c2c2c;
      --text-light: #666;
      --border-color: #ddd;
      --highlight-color: #fff7e6;
      --mark-color: #ffff66;
      --severe-color: #ffcccc;
      --dme-color: #ccffcc;
      --pt-color: #ccffff;
      --error-color: #dc3545;
      --success-color: #28a745;
      --causality-color: #ffccff;
      --warning-color: #ffc107;
    }

    body {
      font-family: "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif;
      background-color: var(--light-bg);
      padding: 20px;
      margin: 0;
      color: var(--text-color);
      line-height: 1.6;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h2 {
      font-size: 2.2rem;
      font-weight: 600;
      color: var(--secondary-color);
      margin-bottom: 25px;
      letter-spacing: -0.3px;
      text-align: center;
    }

    .header-link {
      text-decoration: none;
      color: inherit;
      display: inline-flex;
      align-items: center;
      gap: 10px;
    }

    .header-logo {
      height: 50px;
    }

    .search-form {
      margin-bottom: 30px;
      background: white;
      padding: 25px;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .form-row {
      display: flex;
      gap: 20px;
      margin-bottom: 15px;
    }

    .form-group {
      flex: 1;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      font-size: 0.95rem;
      color: #333;
    }

    input, button, textarea, select {
      width: 100%;
      padding: 12px 14px;
      font-size: 1rem;
      border-radius: 4px;
      border: 1px solid var(--border-color);
      background: white;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    input:focus, textarea:focus, select:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 2px rgba(51, 102, 204, 0.2);
    }

    button {
      background-color: var(--primary-color);
      color: white;
      font-weight: 600;
      border: none;
      cursor: pointer;
      padding: 12px 20px;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    button:hover {
      background-color: var(--primary-dark);
      transform: translateY(-1px);
    }

    button:active {
      transform: translateY(0);
    }

    button.secondary {
      background-color: #6c757d;
    }

    button.secondary:hover {
      background-color: #5a6268;
    }

    button.warning {
      background-color: var(--warning-color);
      color: #212529;
    }

    button.warning:hover {
      background-color: #e0a800;
    }

    .action-buttons {
      display: flex;
      gap: 10px;
      margin-top: 20px;
      flex-wrap: wrap;
    }

    .switch-container {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 28px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0; left: 0; right: 0; bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 28px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 20px;
      width: 20px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: var(--primary-color);
    }

    input:checked + .slider:before {
      transform: translateX(22px);
    }

    #loading {
      display: none;
      padding: 15px;
      text-align: center;
      font-style: italic;
      color: var(--text-light);
    }

    .spinner {
      border: 3px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top: 3px solid var(--primary-color);
      width: 20px;
      height: 20px;
      animation: spin 1s linear infinite;
      display: inline-block;
      margin-right: 10px;
      vertical-align: middle;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    #resultsContainer {
      margin-top: 30px;
    }

    #actionButtons {
      display: none;
    }

    #resultCount {
      font-size: 1rem;
      font-weight: 500;
      color: var(--text-color);
      margin: 20px 0;
      padding: 10px;
      background: #f8f9fa;
      border-radius: 4px;
    }

    .pubmed-verified-banner {
      margin-top: 30px;
      padding: 15px;
      background-color: #e8f0fe;
      border-left: 4px solid var(--primary-color);
      font-size: 0.95rem;
      border-radius: 4px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .pubmed-verified-banner img {
      height: 20px;
    }

    .pubmed-verified-banner a {
      color: var(--primary-color);
      font-weight: 600;
      text-decoration: none;
    }

    .pubmed-verified-banner a:hover {
      text-decoration: underline;
    }

    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
      border: 1px solid var(--border-color);
      background: #fff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    thead {
      background: var(--secondary-color);
      color: white;
      position: sticky;
      top: 0;
    }

    th, td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid var(--border-color);
    }

    th {
      font-weight: 600;
    }

    tbody tr:nth-child(even) {
      background-color: #f8f9fa;
    }

    tbody tr:hover {
      background-color: #eaf2ff;
    }

    .priority-row {
      background-color: var(--highlight-color) !important;
    }

    .ime-row {
      background-color: var(--severe-color) !important;
    }

    .dme-row {
      background-color: var(--dme-color) !important;
    }

    .pt-row {
      background-color: var(--pt-color) !important;
    }

    mark {
      background-color: var(--mark-color);
      padding: 0 2px;
      border-radius: 2px;
    }

    mark.ime {
      background-color: var(--severe-color);
    }

    mark.dme {
      background-color: var(--dme-color);
    }

    mark.pt {
      background-color: var(--pt-color);
    }

    mark.causality {
      background-color: var(--causality-color);
    }

    .drug-highlight {
      color: var(--primary-color);
      font-weight: bold;
    }

    .abstract-cell {
      max-width: 400px;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      cursor: ns-resize;
      transition: max-height 0.3s ease;
    }

    .abstract-cell.expanded {
      -webkit-line-clamp: unset;
      max-height: none;
      white-space: pre-wrap;
      overflow: auto;
    }

    .view-link {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 600;
    }

    .view-link:hover {
      text-decoration: underline;
    }

    .error-message {
      color: var(--error-color);
      font-size: 0.9rem;
      margin-top: -15px;
      margin-bottom: 15px;
      display: none;
    }

    .tooltip {
      position: relative;
      display: inline-block;
      margin-left: 5px;
      color: var(--primary-color);
      cursor: pointer;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      width: 200px;
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 8px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      font-size: 0.8rem;
      font-weight: normal;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }

    #filterButtons {
      margin: 15px 0;
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .filter-btn {
      padding: 8px 15px;
      background: #e0e0e0;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s;
    }

    .filter-btn:hover {
      background: #d0d0d0;
    }

    .filter-btn.active {
      background-color: var(--primary-color);
      color: white;
    }

    #statsDashboard {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 20px;
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .stat-box {
      flex: 1;
      min-width: 150px;
      background: white;
      padding: 15px;
      border-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: var(--primary-color);
    }

    .stat-label {
      font-size: 0.9rem;
      color: var(--text-light);
    }

    .severity-indicator {
      display: inline-block;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      text-align: center;
      line-height: 20px;
      font-size: 12px;
    }

    .severity-high {
      background-color: #ffcccc;
      color: #d32f2f;
    }

    .severity-medium {
      background-color: #fff9c4;
      color: #ffa000;
    }

    .severity-low {
      background-color: #c8e6c9;
      color: #388e3c;
    }

    .footer {
      margin-top: 40px;
      text-align: center;
      font-size: 0.9rem;
      color: var(--text-light);
      padding: 20px 0;
    }

    .top-adrs-container {
      margin-top: 20px;
      background: white;
      padding: 15px;
      border-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .top-adrs-title {
      font-weight: 600;
      margin-bottom: 10px;
      color: var(--secondary-color);
    }

    .top-adr-item {
      display: flex;
      justify-content: space-between;
      padding: 8px 0;
      border-bottom: 1px solid #eee;
    }

    .top-adr-item:last-child {
      border-bottom: none;
    }

    .top-adr-term {
      font-weight: 500;
    }

    .top-adr-count {
      color: var(--primary-color);
      font-weight: 600;
    }

    .adr-list {
      max-height: 100px;
      overflow-y: auto;
      padding: 5px;
      background: #f8f8f8;
      border-radius: 4px;
      margin-top: 5px;
    }

    .adr-list-item {
      margin-bottom: 3px;
      font-size: 0.9rem;
    }

    #chartsContainer {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }

    .chart-row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
    }

    .chart-container {
      flex: 1;
      min-width: 400px;
      height: 400px;
      background: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-color);
      margin-bottom: 20px;
    }

    .tab {
      padding: 10px 20px;
      cursor: pointer;
      border-bottom: 3px solid transparent;
      transition: all 0.3s;
    }

    .tab.active {
      border-bottom-color: var(--primary-color);
      font-weight: 600;
      color: var(--primary-color);
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    .table-container {
      max-height: 600px;
      overflow-y: auto;
      margin-bottom: 20px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
    }

    .table-container table {
      margin-top: 0;
    }

    .date-picker-container {
      display: flex;
      gap: 10px;
    }

    .date-picker-container input {
      flex: 1;
    }

    .date-presets {
      display: flex;
      gap: 5px;
      margin-top: 10px;
    }

    .date-preset-btn {
      padding: 5px 10px;
      font-size: 0.8rem;
      background: #f0f0f0;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .date-preset-btn:hover {
      background: #e0e0e0;
    }

    .date-preset-btn.active {
      background-color: var(--primary-color);
      color: white;
    }

    .search-history {
      margin-top: 15px;
    }

    .search-history-item {
      padding: 8px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
    }

    .search-history-item:hover {
      background-color: #f5f5f5;
    }

    .search-history-item .drug {
      font-weight: 600;
    }

    .search-history-item .date {
      font-size: 0.8rem;
      color: var(--text-light);
    }

    .search-history-item .count {
      float: right;
      font-weight: 600;
    }

    .clear-history {
      margin-top: 10px;
      text-align: right;
    }

    .settings-panel {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 20px;
    }

    .settings-group {
      margin-bottom: 15px;
    }

    .settings-label {
      font-weight: 600;
      margin-bottom: 5px;
    }

    .settings-description {
      font-size: 0.8rem;
      color: var(--text-light);
      margin-bottom: 10px;
    }

    @media (max-width: 768px) {
      .form-row {
        flex-direction: column;
        gap: 0;
      }
      
      .container {
        padding: 15px;
      }
      
      .table-container {
        overflow-x: auto;
      }
      
      .abstract-cell {
        max-width: 200px;
      }

      #actionButtons, #filterButtons {
        flex-direction: column;
      }

      .stat-box, .chart-container {
        min-width: 100%;
      }
      
      .date-picker-container {
        flex-direction: column;
      }
    }
     /* Make action buttons appear in one line */
    #actionButtons {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
      gap: 10px;
      padding-bottom: 10px; /* Add some space for scroll if needed */
    }
    
    #actionButtons button {
      white-space: nowrap;
    }
    
    /* Make filter buttons appear in one line */
    #filterButtons {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
      gap: 10px;
      padding-bottom: 10px; /* Add some space for scroll if needed */
    }
    
    #filterButtons button {
      white-space: nowrap;
    }
    
    .faers-case {
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .faers-case:hover {
      background-color: #f0f7ff !important;
    }

    .faers-serious {
      background-color: #fff0f0 !important;
    }

    .faers-death {
      background-color: #f8f0f0 !important;
    }

    .faers-outcome {
      font-weight: 600;
    }

    .outcome-death {
      color: #d32f2f;
    }

    .outcome-hospitalization {
      color: #ff6f00;
    }

    .outcome-disability {
      color: #ffab00;
    }

    .outcome-life-threatening {
      color: #c2185b;
    }

    .faers-drug-list, .faers-event-list {
      max-height: 100px;
      overflow-y: auto;
      padding: 5px;
      margin: 5px 0;
      background: #f8f8f8;
      border-radius: 4px;
    }

    .faers-drug-item, .faers-event-item {
      margin-bottom: 3px;
      font-size: 0.9rem;
    }

    .faers-drug-suspect {
      font-weight: 600;
      color: #3366cc;
    }

    .faers-event-serious {
      font-weight: 600;
      color: #d32f2f;
    }
    
    /* Ensure charts have proper dimensions */
    .chart-container {
      height: 300px; /* Fixed height for consistency */
      min-width: 300px;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      #actionButtons, #filterButtons {
        flex-wrap: wrap;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>
      <a href="https://thesumith.github.io/PubMed/" class="header-link">
        <img src="https://i.ibb.co/6JprMTCv/pubmed-logo-blue1.png" alt="PubMed Logo" class="header-logo">
        DrugLens Pro
      </a>
    </h2>

    <div class="tabs">
      <div class="tab active" data-tab="search">Search</div>
      <div class="tab" data-tab="faers">FAERS Results</div>
      <div class="tab" data-tab="history">History</div>
      <div class="tab" data-tab="settings">Settings</div>
    </div>

    <div class="tab-content active" id="search-tab">
      <div class="search-form">
        <div class="form-row">
          <div class="form-group">
            <label for="drugName">
              Drug Name
              <span class="tooltip">
                <i class="fas fa-info-circle"></i>
                <span class="tooltiptext">Enter the drug name you want to research (e.g., Ibuprofen, Aspirin)</span>
              </span>
            </label>
            <input type="text" id="drugName" placeholder="e.g. Ibuprofen, Aspirin">
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="fromDate">From Date</label>
            <div class="date-picker-container">
              <input type="date" id="fromDate">
            </div>
            <div class="date-presets">
              <button class="date-preset-btn" data-days="30">Last 30 Days</button>
              <button class="date-preset-btn" data-days="90">Last 90 Days</button>
              <button class="date-preset-btn" data-days="365">Last Year</button>
              <button class="date-preset-btn" data-days="1095">Last 3 Years</button>
            </div>
          </div>
          <div class="form-group">
            <label for="toDate">To Date</label>
            <div class="date-picker-container">
              <input type="date" id="toDate">
            </div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="resultLimit">Result Limit</label>
            <select id="resultLimit">
              <option value="100">100</option>
              <option value="500">500</option>
              <option value="1000">1000</option>
              <option value="5000">5000</option>
              <option value="10000" selected>10,000</option>
              <option value="0">No Limit</option>
            </select>
          </div>
          <div class="form-group">
            <label for="sortOrder">Sort By</label>
            <select id="sortOrder">
              <option value="relevance">Relevance</option>
              <option value="date">Publication Date (Newest)</option>
              <option value="ime">IME Count (Highest)</option>
              <option value="dme">DME Count (Highest)</option>
              <option value="pt">PT Count (Highest)</option>
            </select>
          </div>
        </div>

        <div class="switch-container">
          <label class="switch">
            <input type="checkbox" id="adrToggle" checked>
            <span class="slider round"></span>
          </label>
          <span>Include ADR (Adverse Drug Reaction) Terms</span>
          <span class="tooltip">
            <i class="fas fa-info-circle"></i>
            <span class="tooltiptext">When enabled, filters for articles mentioning adverse drug reactions, toxicity, and related terms</span>
          </span>
        </div>

        <button id="searchButton">
          <i class="fas fa-search"></i> Search PubMed
        </button>
      </div>

      <div id="loading">
        <div class="spinner"></div>
        Searching PubMed... This may take a moment for large result sets.
      </div>

      <div id="actionButtons" class="action-buttons" style="display: none;">
        <button id="downloadExcelBtn">
          <i class="fas fa-file-excel"></i> Download Excel Report
        </button>
        <button id="openPubMedBtn" class="secondary">
          <i class="fas fa-external-link-alt"></i> Open in PubMed
        </button>
        <button id="saveSearchBtn" class="warning">
          <i class="fas fa-save"></i> Save Search
        </button>
      </div>

      <div id="statsDashboard" style="display: none;">
        <div class="stat-box">
          <div class="stat-value" id="totalArticles">0</div>
          <div class="stat-label">Total Articles</div>
        </div>
        <div class="stat-box">
          <div class="stat-value" id="imeArticles">0</div>
          <div class="stat-label">IME Mentions</div>
        </div>
        <div class="stat-box">
          <div class="stat-value" id="dmeArticles">0</div>
          <div class="stat-label">DME Mentions</div>
        </div>
        <div class="stat-box">
          <div class="stat-value" id="ptArticles">0</div>
          <div class="stat-label">PT Mentions</div>
        </div>
        <div class="stat-box">
          <div class="stat-value" id="topIMETerm">-</div>
          <div class="stat-label">Most Frequent IME</div>
        </div>
      </div>
      
        <div id="chartsContainer" style="display: none; margin-top: 20px;">
    <div style="display: flex; flex-wrap: wrap; gap: 20px;">
      <div class="chart-container" style="flex: 1;">
        <canvas id="imeChart"></canvas>
      </div>
      <div class="chart-container" style="flex: 1;">
        <canvas id="dmeChart"></canvas>
      </div>
    </div>
  </div>
      
<div id="filterButtons" style="display: none;">
    <button class="filter-btn active" data-filter="all">All Results</button>
    <button class="filter-btn" data-filter="ime">IME Mentions</button>
    <button class="filter-btn" data-filter="dme">DME Mentions</button>
    <button class="filter-btn" data-filter="priority">PT Mentions</button>
  </div>
      
      <p id="resultCount"></p>
      
      <div id="pubmedVerifiedBanner" class="pubmed-verified-banner" style="display: none;">
        <img src="https://i.ibb.co/WmdnRkj/pubmed-logo-blue1.png" alt="PubMed">
        <div>
          <strong>Source:</strong> All data is retrieved directly from 
          <a href="https://pubmed.ncbi.nlm.nih.gov/" target="_blank">PubMed</a> 
          using the official NCBI E-Utilities API. Results are sorted with potential IME/DME/PT mentions highlighted.
        </div>
      </div>

      <div id="chartsContainer" style="display: none;">
        <div class="chart-row">
          <div class="chart-container">
            <canvas id="imeChart"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="dmeChart"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="ptChart"></canvas>
          </div>
        </div>
        <div class="chart-row">
          <div class="chart-container">
            <canvas id="timeChart"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="journalChart"></canvas>
          </div>
        </div>
      </div>

      <div class="table-container">
        <table id="resultsTable">
          <thead>
            <tr>
              <th>PMID</th>
              <th>Title</th>
              <th>IME/DME/PT Mentions</th>
              <th>Type</th>
              <th>Abstract Snippet</th>
              <th>Link</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>

    <div class="tab-content" id="history-tab">
      <h3>Search History</h3>
      <div class="search-history" id="searchHistoryList">
        <!-- History items will be added here dynamically -->
      </div>
      <div class="clear-history">
        <button id="clearHistoryBtn" class="secondary">
          <i class="fas fa-trash"></i> Clear History
        </button>
      </div>
    </div>

    <div class="tab-content" id="settings-tab">
      <h3>Application Settings</h3>
      <div class="settings-panel">
        <div class="settings-group">
          <div class="settings-label">IME/DME/PT Highlight Colors</div>
          <div class="settings-description">Customize the colors used to highlight different types of medical events</div>
          <div class="form-row">
            <div class="form-group">
              <label for="imeColor">IME Color</label>
              <input type="color" id="imeColor" value="#ffcccc">
            </div>
            <div class="form-group">
              <label for="dmeColor">DME Color</label>
              <input type="color" id="dmeColor" value="#ccffcc">
            </div>
            <div class="form-group">
              <label for="ptColor">PT Color</label>
              <input type="color" id="ptColor" value="#ccffff">
            </div>
          </div>
        </div>
        <div class="settings-group">
          <div class="settings-label">Default Search Settings</div>
          <div class="settings-description">Configure your preferred default search parameters</div>
          <div class="form-row">
            <div class="form-group">
              <label for="defaultResultLimit">Default Result Limit</label>
              <select id="defaultResultLimit">
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
                <option value="5000">5000</option>
                <option value="10000" selected>10,000</option>
                <option value="0">No Limit</option>
              </select>
            </div>
            <div class="form-group">
              <label for="defaultDateRange">Default Date Range</label>
              <select id="defaultDateRange">
                <option value="30">Last 30 Days</option>
                <option value="90">Last 90 Days</option>
                <option value="365">Last Year</option>
                <option value="1095" selected>Last 3 Years</option>
              </select>
            </div>
          </div>
        </div>
        <button id="saveSettingsBtn">
          <i class="fas fa-save"></i> Save Settings
        </button>
      </div>
    </div>

    <div class="tab-content" id="faers-tab">
  <h3>FAERS Case Reports</h3>
  <div id="faersSearchControls" style="margin-bottom: 20px;">
    <button id="searchFaersBtn" class="secondary">
      <i class="fas fa-search"></i> Check PubMed Results in FAERS
    </button>
    <div id="faersLoading" style="display: none; margin-top: 10px;">
      <div class="spinner"></div> Searching FAERS database...
    </div>
  </div>
  
  <div id="faersStats" class="stats-dashboard" style="display: none;">
    <div class="stat-box">
      <div class="stat-value" id="faersTotalCases">0</div>
      <div class="stat-label">Total FAERS Cases</div>
    </div>
    <div class="stat-box">
      <div class="stat-value" id="faersSeriousCases">0</div>
      <div class="stat-label">Serious Cases</div>
    </div>
    <div class="stat-box">
      <div class="stat-value" id="faersDeathCases">0</div>
      <div class="stat-label">Cases with Death</div>
    </div>
  </div>
  
  <div class="table-container" id="faersResultsContainer" style="display: none;">
    <table id="faersResultsTable">
      <thead>
        <tr>
          <th>Case ID</th>
          <th>Patient Details</th>
          <th>Adverse Events</th>
          <th>Drugs</th>
          <th>Outcome</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>
    
    <div class="footer">
      <p>PubMed DrugLens Pro - IME/DME/PT Signal Detection &copy; 2023 | For research use only</p>
      <p><small>Not for clinical decision making. Consult a healthcare professional for medical advice.</small></p>
    </div>
  </div>

  <script>
    // ========================
    // Application Configuration
    // ========================
    const config = {
      // PubMed API settings
      api: {
        baseUrl: 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/',
        maxRetries: 3,
        delayBetweenRequests: 1000, // ms
        chunkSize: 200 // Number of articles to fetch at once
      },
      
      // Highlight colors
      colors: {
        ime: '#ffcccc',
        dme: '#ccffcc',
        pt: '#ccffff',
        causality: '#ffccff',
        drug: '#3366cc'
      },
      
      // Default settings
      defaults: {
        resultLimit: 10000,
        dateRange: 1095, // days (3 years)
        sortOrder: 'relevance',
        includeADR: true
      },
      
      // Storage keys
      storageKeys: {
        settings: 'drugLensSettings',
        history: 'drugLensHistory'
      }
    };

    // ========================
    // State Management
    // ========================
    const state = {
      currentSearch: {
        term: '',
        drug: '',
        fromDate: '',
        toDate: '',
        resultCount: 0
      },
      allArticles: [],
      imeTermCounts: {},
      dmeTermCounts: {},
      ptTermCounts: {},
      journalCounts: {},
           searchHistory: [],
      settings: {...config.defaults},
      charts: {
        imeChart: null,
        dmeChart: null,
        ptChart: null,
        timeChart: null,
        journalChart: null
      }
    };

    // ========================
    // DOM Elements
    // ========================
    const elements = {
      // Search form
      drugName: document.getElementById('drugName'),
      fromDate: document.getElementById('fromDate'),
      toDate: document.getElementById('toDate'),
      resultLimit: document.getElementById('resultLimit'),
      sortOrder: document.getElementById('sortOrder'),
      adrToggle: document.getElementById('adrToggle'),
      searchButton: document.getElementById('searchButton'),
      
      // Results display
      loading: document.getElementById('loading'),
      actionButtons: document.getElementById('actionButtons'),
      statsDashboard: document.getElementById('statsDashboard'),
      filterButtons: document.getElementById('filterButtons'),
      resultCount: document.getElementById('resultCount'),
      pubmedVerifiedBanner: document.getElementById('pubmedVerifiedBanner'),
      resultsTable: document.getElementById('resultsTable'),
      tableBody: document.querySelector('#resultsTable tbody'),
      tableContainer: document.querySelector('.table-container'),
      
      // Charts
      chartsContainer: document.getElementById('chartsContainer'),
      imeChart: document.getElementById('imeChart'),
      dmeChart: document.getElementById('dmeChart'),
      ptChart: document.getElementById('ptChart'),
      timeChart: document.getElementById('timeChart'),
      journalChart: document.getElementById('journalChart'),
      
      // Action buttons
      downloadExcelBtn: document.getElementById('downloadExcelBtn'),
      openPubMedBtn: document.getElementById('openPubMedBtn'),
      saveSearchBtn: document.getElementById('saveSearchBtn'),
      
      // History tab
      searchHistoryList: document.getElementById('searchHistoryList'),
      clearHistoryBtn: document.getElementById('clearHistoryBtn'),
      
      // Settings tab
      imeColor: document.getElementById('imeColor'),
      dmeColor: document.getElementById('dmeColor'),
      ptColor: document.getElementById('ptColor'),
      defaultResultLimit: document.getElementById('defaultResultLimit'),
      defaultDateRange: document.getElementById('defaultDateRange'),
      saveSettingsBtn: document.getElementById('saveSettingsBtn'),
      
      // Tabs
      tabs: document.querySelectorAll('.tab'),
      tabContents: document.querySelectorAll('.tab-content'),
      
      // Date presets
      datePresetBtns: document.querySelectorAll('.date-preset-btn')
    };

    // ========================
    // IME/DME/PT Term Lists
    // ========================
    // IME (Important Medical Events) terms
    const imeTerms = [
      "Haematotoxicity", "Paraneoplastic leukaemoid reaction", "Platelet toxicity", 
      "Splenic sequestration crisis", "Degenerative cardiac valve disease",
      "acute kidney injury", "acute liver failure", "agranulocytosis", 
      "anaphylaxis", "cardiac arrest", "hepatic failure",
      "myocardial infarction", "pulmonary embolism", "stroke",
      "seizure", "pancytopenia", "thrombocytopenia",
      "neutropenia", "rhabdomyolysis", "stevens johnson syndrome",
      "toxic epidermal necrolysis", "angioedema", "arrhythmia"
      // Add hundreds/thousands more terms as needed
    ];

    // DME (Designated Medical Events) terms
    const dmeTerms = [
      "Acute hepatic failure", "Acute kidney injury", "Agranulocytosis", 
      "Anaphylactic reaction", "Anaphylactic shock", "Anaphylactoid reaction",
      "aplastic anaemia", "cardiac failure", "hepatic failure", 
      "hepatitis fulminant", "interstitial lung disease", "pancytopenia",
      "pulmonary fibrosis", "renal failure", "respiratory failure",
      "seizure", "stevens johnson syndrome", "toxic epidermal necrolysis"
      // Add dozens more terms as needed
    ];

    // PT (Preferred Terms) - Add your preferred terms here
    const ptTerms = [
      "Eclampsia", "Hypertension", "Headache",
      "Nausea", "Vomiting", "Dizziness",
      "Fatigue", "Rash", "Diarrhea"
      // Add your preferred terms here
    ];

    // Causality terms to highlight
    const causalityTerms = [
      "caused by", "induced", "triggered", "secondary to", "associated with",
      "due to", "resulted in", "led to", "drug-related", "drug induced",
      "attributed to", "precipitated by", "as a result of", "because of",
      "complicated by", "arising from", "in response to", "following", "after",
      "toxicity", "reaction", "side effect", "adverse effect", "adverse reaction",
      "adverse event", "complication", "consequence", "effect", "outcome"
    ];

    // ========================
    // Utility Functions
    // ========================
    function formatDateForDisplay(date) {
      return date.toISOString().split('T')[0];
    }

    function formatDateForPubMed(date) {
      return date.toISOString().split('T')[0].replace(/-/g, '/');
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function escapeCsv(str) {
      if (!str) return '';
      return `"${str.replace(/"/g, '""')}"`;
    }

    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    async function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    // ========================
    // Storage Functions
    // ========================
    function loadSettings() {
      const savedSettings = localStorage.getItem(config.storageKeys.settings);
      if (savedSettings) {
        state.settings = {...state.settings, ...JSON.parse(savedSettings)};
      }
      applySettings();
    }

    function saveSettings() {
      state.settings = {
        resultLimit: parseInt(elements.defaultResultLimit.value),
        dateRange: parseInt(elements.defaultDateRange.value),
        sortOrder: 'relevance',
        includeADR: true,
        colors: {
          ime: elements.imeColor.value,
          dme: elements.dmeColor.value,
          pt: elements.ptColor.value
        }
      };
      localStorage.setItem(config.storageKeys.settings, JSON.stringify(state.settings));
      applySettings();
      showToast('Settings saved successfully');
    }

    function applySettings() {
      document.documentElement.style.setProperty('--severe-color', state.settings.colors?.ime || config.colors.ime);
      document.documentElement.style.setProperty('--dme-color', state.settings.colors?.dme || config.colors.dme);
      document.documentElement.style.setProperty('--pt-color', state.settings.colors?.pt || config.colors.pt);
      
      elements.defaultResultLimit.value = state.settings.resultLimit;
      elements.defaultDateRange.value = state.settings.dateRange;
      elements.imeColor.value = state.settings.colors?.ime || config.colors.ime;
      elements.dmeColor.value = state.settings.colors?.dme || config.colors.dme;
      elements.ptColor.value = state.settings.colors?.pt || config.colors.pt;
    }

    function loadHistory() {
      const savedHistory = localStorage.getItem(config.storageKeys.history);
      if (savedHistory) {
        state.searchHistory = JSON.parse(savedHistory);
        renderHistory();
      }
    }

    function saveHistory() {
      localStorage.setItem(config.storageKeys.history, JSON.stringify(state.searchHistory));
    }

    function addToHistory(search) {
      const existingIndex = state.searchHistory.findIndex(
        item => item.drug === search.drug && 
               item.fromDate === search.fromDate && 
               item.toDate === search.toDate
      );
      
      if (existingIndex >= 0) {
        state.searchHistory[existingIndex] = search;
      } else {
        state.searchHistory.unshift(search);
        if (state.searchHistory.length > 50) {
          state.searchHistory.pop();
        }
      }
      
      saveHistory();
      renderHistory();
    }

    function clearHistory() {
      state.searchHistory = [];
      saveHistory();
      renderHistory();
      showToast('Search history cleared');
    }

    function renderHistory() {
      elements.searchHistoryList.innerHTML = '';
      
      if (state.searchHistory.length === 0) {
        elements.searchHistoryList.innerHTML = '<p>No search history yet.</p>';
        return;
      }
      
      state.searchHistory.forEach((search, index) => {
        const item = document.createElement('div');
        item.className = 'search-history-item';
        item.innerHTML = `
          <div class="drug">${escapeHtml(search.drug)}</div>
          <div class="date">${search.fromDate} to ${search.toDate}</div>
          <div class="count">${search.resultCount} results</div>
        `;
        item.addEventListener('click', () => loadFromHistory(index));
        elements.searchHistoryList.appendChild(item);
      });
    }

    function loadFromHistory(index) {
      const search = state.searchHistory[index];
      if (!search) return;
      
      switchTab('search');
      
      elements.drugName.value = search.drug;
      elements.fromDate.value = search.fromDate;
      elements.toDate.value = search.toDate;
      elements.resultLimit.value = search.resultLimit || state.settings.resultLimit;
      elements.sortOrder.value = search.sortOrder || 'relevance';
      elements.adrToggle.checked = search.includeADR !== false;
      
      searchPubMed();
    }

    // ========================
    // UI Functions
    // ========================
    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `toast toast-${type}`;
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.classList.add('show');
      }, 10);
      
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => document.body.removeChild(toast), 300);
      }, 3000);
    }

    function switchTab(tabName) {
      elements.tabs.forEach(tab => {
        if (tab.dataset.tab === tabName) {
          tab.classList.add('active');
        } else {
          tab.classList.remove('active');
        }
      });
      
      elements.tabContents.forEach(content => {
        if (content.id === `${tabName}-tab`) {
          content.classList.add('active');
        } else {
          content.classList.remove('active');
        }
      });
    }

    function showLoading(message) {
      elements.loading.innerHTML = `<div class="spinner"></div> ${message}`;
      elements.loading.style.display = 'block';
    }

    function hideLoading() {
      elements.loading.style.display = 'none';
    }

    function resetUI() {
      elements.tableBody.innerHTML = '';
      elements.pubmedVerifiedBanner.style.display = 'none';
      elements.actionButtons.style.display = 'none';
      elements.filterButtons.style.display = 'none';
      elements.statsDashboard.style.display = 'none';
      elements.chartsContainer.style.display = 'none';
      elements.resultCount.textContent = '';
      
      Object.values(state.charts).forEach(chart => {
        if (chart) chart.destroy();
      });
      state.charts = {
        imeChart: null,
        dmeChart: null,
        ptChart: null,
        timeChart: null,
        journalChart: null
      };
    }

    function initializeDatePickers() {
      const today = new Date();
      const threeYearsAgo = new Date();
      threeYearsAgo.setFullYear(today.getFullYear() - 3);
      
      elements.toDate.value = formatDateForDisplay(today);
      elements.fromDate.value = formatDateForDisplay(threeYearsAgo);
      
      elements.toDate.max = formatDateForDisplay(today);
      elements.fromDate.max = formatDateForDisplay(today);
    }

    // ========================
    // Search Functions
    // ========================
    async function searchPubMed() {
      const drug = elements.drugName.value.trim();
      if (!drug) {
        showToast('Please enter a drug name', 'error');
        return;
      }
      
      const fromDate = new Date(elements.fromDate.value);
      const toDate = new Date(elements.toDate.value);
      
      if (isNaN(fromDate.getTime())) {
        showToast('Invalid "From" date', 'error');
        return;
      }
      
      if (isNaN(toDate.getTime())) {
        showToast('Invalid "To" date', 'error');
        return;
      }
      
      if (fromDate > toDate) {
        showToast('"From" date must be before "To" date', 'error');
        return;
      }
      
      resetUI();
      state.allArticles = [];
      state.imeTermCounts = {};
      state.dmeTermCounts = {};
      state.ptTermCounts = {};
      state.journalCounts = {};
      
      state.currentSearch = {
        drug,
        fromDate: elements.fromDate.value,
        toDate: elements.toDate.value,
        resultLimit: parseInt(elements.resultLimit.value) || 0,
        sortOrder: elements.sortOrder.value,
        includeADR: elements.adrToggle.checked
      };
      
      try {
        showLoading('Preparing search...');
        
        const fromDateFormatted = formatDateForPubMed(fromDate);
        const toDateFormatted = formatDateForPubMed(toDate);
        
        let baseQuery = `(("${drug}"[All Fields]) AND ("${fromDateFormatted}"[Date - Publication] : "${toDateFormatted}"[Date - Publication]))`;
        
        if (state.currentSearch.includeADR) {
          const adrTerms = `('adverse drug reaction'/exp OR 'adverse drug reaction' OR 'drug overdose'/exp OR 'drug overdose' OR 'drug misuse'/exp OR 'drug misuse' OR 'drug abuse' OR 'substance abuse'/exp OR 'substance abuse' OR 'pregnancy'/exp OR 'pregnancy' OR 'drug efficacy'/exp OR 'drug efficacy' OR 'drug withdrawal'/exp OR 'drug withdrawal' OR 'drug tolerance'/exp OR 'drug tolerance' OR 'medication error'/exp OR 'medication error' OR 'death'/exp OR 'death' OR 'drug interaction'/exp OR 'drug interaction' OR 'carcinogenicity'/exp OR 'carcinogenicity' OR 'off label drug use'/exp OR 'off label drug use' OR 'occupational exposure'/exp OR 'occupational exposure' OR 'toxicity'/exp OR 'intoxication' OR 'drug contraindication'/exp OR 'drug contraindication' OR 'congenital disorder'/exp OR 'congenital disorder' OR 'drug treatment failure'/exp OR 'drug treatment failure' OR 'lactation'/exp OR 'lactation' OR 'case report'/exp OR 'case report' OR 'environmental exposure'/exp OR 'environmental exposure' OR 'treatment contraindication'/exp OR 'treatment contraindication')`;
          baseQuery += ` AND humans[MeSH Terms] AND ${adrTerms}`;
        } else {
          baseQuery += ` AND humans[MeSH Terms]`;
        }
        
        state.currentSearch.term = baseQuery;
        
        showLoading('Searching PubMed...');
        const ids = await fetchAllPMIDs(baseQuery);
        
        if (ids.length === 0) {
          showToast('No results found for your search criteria', 'info');
          hideLoading();
          return;
        }
        
        const limitedIds = state.currentSearch.resultLimit > 0 ? 
          ids.slice(0, state.currentSearch.resultLimit) : 
          ids;
        
        showLoading(`Fetching details for ${limitedIds.length} articles...`);
        const articles = await fetchPubMedDetails(limitedIds);
        
        if (articles.length === 0) {
          showToast('No articles found with complete details', 'info');
          hideLoading();
          return;
        }
        
        state.allArticles = processArticles(articles, drug);
        sortArticles(state.currentSearch.sortOrder);
        displayResults();
        
        addToHistory({
          ...state.currentSearch,
          resultCount: state.allArticles.length
        });
        
      } catch (error) {
        console.error('Search error:', error);
        showToast(`Error: ${error.message}`, 'error');
      } finally {
        hideLoading();
      }
    }

    async function fetchAllPMIDs(searchTerm) {
      let allIDs = [];
      const retmax = 10000;
      let retstart = 0;
      let totalResults = 0;
      let attempts = 0;

      try {
        const countUrl = `${config.api.baseUrl}esearch.fcgi?db=pubmed&retmax=1&retstart=0&term=${encodeURIComponent(searchTerm)}&retmode=json`;
        
        while (attempts < config.api.maxRetries) {
          try {
            const countRes = await fetch(countUrl);
            
            if (!countRes.ok) {
              throw new Error(`HTTP error! status: ${countRes.status}`);
            }
            
            const countData = await countRes.json();
            totalResults = parseInt(countData.esearchresult.count);
            break;
          } catch (err) {
            attempts++;
            if (attempts >= config.api.maxRetries) throw err;
            await sleep(config.api.delayBetweenRequests);
          }
        }
        
        if (totalResults === 0) return [];
        
        showLoading(`Found ${totalResults} articles. Fetching IDs...`);
        
        while (retstart < totalResults) {
          const url = `${config.api.baseUrl}esearch.fcgi?db=pubmed&retmax=${retmax}&retstart=${retstart}&term=${encodeURIComponent(searchTerm)}&retmode=json`;
          
          attempts = 0;
          let success = false;
          
          while (attempts < config.api.maxRetries && !success) {
            try {
              const res = await fetch(url);
              
              if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
              }
              
              const data = await res.json();
              const ids = data.esearchresult.idlist;
              allIDs = allIDs.concat(ids);
              success = true;
              
              showLoading(`Fetching IDs... (${Math.min(retstart + retmax, totalResults)}/${totalResults})`);
              
            } catch (err) {
              attempts++;
              if (attempts >= config.api.maxRetries) throw err;
              await sleep(config.api.delayBetweenRequests * attempts);
            }
          }
          
          retstart += retmax;
          await sleep(config.api.delayBetweenRequests);
        }
      } catch (err) {
        console.error("Error fetching PubMed IDs:", err);
        throw new Error("Failed to fetch PubMed IDs. Please try again later.");
      }
      
      return allIDs;
    }

    async function fetchPubMedDetails(ids) {
      const chunks = [];
      const parser = new DOMParser();
      
      try {
        for (let i = 0; i < ids.length; i += config.api.chunkSize) {
          const chunk = ids.slice(i, i + config.api.chunkSize);
          const efetchURL = `${config.api.baseUrl}efetch.fcgi?db=pubmed&id=${chunk.join(',')}&retmode=xml`;
          
          let attempts = 0;
          let success = false;
          
          while (attempts < config.api.maxRetries && !success) {
            try {
              const res = await fetch(efetchURL);
              
              if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
              }
              
              const xml = await res.text();
              const xmlDoc = parser.parseFromString(xml, "text/xml");
              chunks.push(...xmlDoc.getElementsByTagName("PubmedArticle"));
              success = true;
              
              const processed = Math.min(i + config.api.chunkSize, ids.length);
              showLoading(`Processing articles... (${processed}/${ids.length})`);
              
            } catch (err) {
              attempts++;
              if (attempts >= config.api.maxRetries) throw err;
              await sleep(config.api.delayBetweenRequests * attempts);
            }
          }
          
          await sleep(config.api.delayBetweenRequests);
        }
      } catch (err) {
        console.error("Error fetching PubMed details:", err);
        throw new Error("Failed to fetch article details. Please try again later.");
      }
      
      return chunks;
    }

    function processArticles(articles, drug) {
      return articles.map(article => {
        const title = getTitle(article);
        const abstract = getAbstract(article);
        const text = `${title} ${abstract}`.toLowerCase();
        
        const { imeCount, dmeCount, ptCount, hasIME, hasDME, hasPT, imeList, dmeList, ptList } = countTerms(text);
        
        // ========================
// XML Parsing Functions
// ========================
function getPMID(article) {
  return article.querySelector('PMID')?.textContent || '';
}

function getTitle(article) {
  return article.querySelector('ArticleTitle')?.textContent || '';
}

function getAbstract(article) {
  const abstractTexts = article.querySelectorAll('AbstractText');
  if (!abstractTexts.length) return '';
  
  return Array.from(abstractTexts)
    .map(node => node.textContent)
    .join(' ');
}

function getAuthors(article) {
  const authors = article.querySelectorAll('Author');
  if (!authors.length) return '';
  
  return Array.from(authors)
    .map(author => {
      const lastName = author.querySelector('LastName')?.textContent || '';
      const foreName = author.querySelector('ForeName')?.textContent || '';
      return `${lastName} ${foreName}`.trim();
    })
    .filter(name => name)
    .join(', ');
}

function getJournal(article) {
  return article.querySelector('Journal > Title')?.textContent || 
         article.querySelector('ISOAbbreviation')?.textContent || 
         'Unknown Journal';
}

function getArticleDate(article) {
  const pubDate = article.querySelector('PubDate');
  if (!pubDate) return 'Unknown Date';
  
  const year = pubDate.querySelector('Year')?.textContent || '';
  const month = pubDate.querySelector('Month')?.textContent || '';
  const day = pubDate.querySelector('Day')?.textContent || '';
  
  return [year, month, day].filter(Boolean).join('-');
}

function getArticleDateObject(article) {
  const dateStr = getArticleDate(article);
  if (!dateStr || dateStr === 'Unknown Date') return new Date(0); // Epoch
  
  // Try to parse different date formats
  const formats = [
    'yyyy-MM-dd',   // Full date
    'yyyy-MM',      // Year and month
    'yyyy'          // Just year
  ];
  
  for (const format of formats) {
    const date = luxon.DateTime.fromFormat(dateStr, format);
    if (date.isValid) return date.toJSDate();
  }
  
  return new Date(0); // Fallback to epoch
}

function getLink(article) {
  const pmid = getPMID(article);
  return `https://pubmed.ncbi.nlm.nih.gov/${pmid}/`;
}
        
        imeList.forEach(term => {
          state.imeTermCounts[term] = (state.imeTermCounts[term] || 0) + 1;
        });
        
        dmeList.forEach(term => {
          state.dmeTermCounts[term] = (state.dmeTermCounts[term] || 0) + 1;
        });
        
        ptList.forEach(term => {
          state.ptTermCounts[term] = (state.ptTermCounts[term] || 0) + 1;
        });
        
        const journal = getJournal(article);
        state.journalCounts[journal] = (state.journalCounts[journal] || 0) + 1;
        
        return {
          pmid: getPMID(article),
          title,
          abstract,
          authors: getAuthors(article),
          journal,
          date: getArticleDate(article),
          pubDate: getArticleDateObject(article),
          link: getLink(article),
          imeCount,
          dmeCount,
          ptCount,
          hasIME,
          hasDME,
          hasPT,
          imeList,
          dmeList,
          ptList,
          text
        };
      });
    }

    function countTerms(text) {
      if (!text) return { 
        imeCount: 0, dmeCount: 0, ptCount: 0, 
        hasIME: false, hasDME: false, hasPT: false,
        imeList: [], dmeList: [], ptList: [] 
      };
      
      let imeCount = 0, dmeCount = 0, ptCount = 0;
      const imeList = [], dmeList = [], ptList = [];
      const textLower = text.toLowerCase();
      
      imeTerms.forEach(term => {
        const termLower = term.toLowerCase();
        const regex = new RegExp(termLower, "g");
        const matches = textLower.match(regex);
        
        if (matches) {
          imeCount += matches.length;
          if (!imeList.includes(termLower)) {
            imeList.push(termLower);
          }
        }
      });
      
      dmeTerms.forEach(term => {
        const termLower = term.toLowerCase();
        const regex = new RegExp(termLower, "g");
        const matches = textLower.match(regex);
        
        if (matches) {
          dmeCount += matches.length;
          if (!dmeList.includes(termLower)) {
            dmeList.push(termLower);
          }
        }
      });
      
      ptTerms.forEach(term => {
        const termLower = term.toLowerCase();
        const regex = new RegExp(termLower, "g");
        const matches = textLower.match(regex);
        
        if (matches) {
          ptCount += matches.length;
          if (!ptList.includes(termLower)) {
            ptList.push(termLower);
          }
        }
      });
      
      return {
        imeCount,
        dmeCount,
        ptCount,
        hasIME: imeCount > 0,
        hasDME: dmeCount > 0,
        hasPT: ptCount > 0,
        imeList,
        dmeList,
        ptList
      };
    }

    function sortArticles(sortOrder) {
      switch (sortOrder) {
        case 'date':
          state.allArticles.sort((a, b) => b.pubDate - a.pubDate);
          break;
        case 'ime':
          state.allArticles.sort((a, b) => {
            if (a.hasDME && !b.hasDME) return -1;
            if (b.hasDME && !a.hasDME) return 1;
            return b.imeCount - a.imeCount;
          });
          break;
        case 'dme':
          state.allArticles.sort((a, b) => {
            if (a.hasDME && !b.hasDME) return -1;
            if (b.hasDME && !a.hasDME) return 1;
            return b.dmeCount - a.dmeCount;
          });
          break;
        case 'pt':
          state.allArticles.sort((a, b) => {
            if (a.hasPT && !b.hasPT) return -1;
            if (b.hasPT && !a.hasPT) return 1;
            return b.ptCount - a.ptCount;
          });
          break;
        default: // 'relevance'
          break;
      }
    }

    function displayResults() {
      elements.tableBody.innerHTML = '';
      
      let csvContent = "PMID,Title,Authors,Journal,Publication Date,Abstract,IME Count,DME Count,PT Count,IME List,DME List,PT List,Link\n";
      let imeCsvContent = "PMID,Title,Authors,Journal,Publication Date,Abstract,IME Count,DME Count,PT Count,IME List,DME List,PT List,Link\n";
      
      state.allArticles.forEach(article => {
        const tr = document.createElement("tr");
        if (article.hasDME) tr.classList.add("dme-row");
        else if (article.hasIME) tr.classList.add("ime-row");
        else if (article.hasPT) tr.classList.add("pt-row");
        
        if (article.imeCount > 5 || article.hasDME || article.hasPT) {
          tr.classList.add("priority-row");
        }
        
        const highlightedTitle = highlightContent(article.title, state.currentSearch.drug);
        const highlightedAbstract = highlightContent(article.abstract, state.currentSearch.drug);
        
        let typeIndicator = '🟢'; // None
        if (article.hasDME) typeIndicator = '🔵'; // DME
        else if (article.hasIME) typeIndicator = '🔴'; // IME
        else if (article.hasPT) typeIndicator = '🟡'; // PT
        
        const termList = [];
        if (article.hasDME) {
          termList.push(...article.dmeList.map(term => `<span class="dme-term">${term}</span>`));
        }
        if (article.hasIME) {
          termList.push(...article.imeList
            .filter(term => !article.dmeList.includes(term))
            .map(term => `<span class="ime-term">${term}</span>`));
        }
        if (article.hasPT) {
          termList.push(...article.ptList
            .filter(term => !article.dmeList.includes(term) && !article.imeList.includes(term))
            .map(term => `<span class="pt-term">${term}</span>`));
        }
        
        const termDisplay = termList.length > 0 
          ? `<div class="adr-list">${termList.join(", ")}</div>`
          : "None";
        
        tr.innerHTML = `
          <td>${article.pmid}</td>
          <td>${highlightedTitle}</td>
          <td>${termDisplay}</td>
          <td>${typeIndicator}</td>
          <td class="abstract-cell">${highlightedAbstract}</td>
          <td><a href="${article.link}" class="view-link" target="_blank">View <i class="fas fa-external-link-alt"></i></a></td>
        `;
        
        const csvRow = `"${article.pmid}","${escapeCsv(article.title)}","${escapeCsv(article.authors)}","${escapeCsv(article.journal)}","${article.date}","${escapeCsv(article.abstract)}",${article.imeCount},${article.dmeCount},${article.ptCount},"${article.imeList.join('; ')}","${article.dmeList.join('; ')}","${article.ptList.join('; ')}","${article.link}"\n`;
        csvContent += csvRow;
        
        if (article.imeCount > 0) {
          imeCsvContent += csvRow;
        }
        
        elements.tableBody.appendChild(tr);
      });
      
      document.querySelectorAll('.abstract-cell').forEach(cell => {
        cell.addEventListener('click', function() {
          this.classList.toggle('expanded');
        });
      });
      
      const imeArticles = state.allArticles.filter(a => a.imeCount > 0).length;
      const dmeArticles = state.allArticles.filter(a => a.dmeCount > 0).length;
      const ptArticles = state.allArticles.filter(a => a.ptCount > 0).length;
      
      elements.resultCount.textContent = `Found ${state.allArticles.length} articles. ${imeArticles} contain IME mentions (${dmeArticles} with DMEs, ${ptArticles} with PTs).`;
      elements.actionButtons.style.display = "flex";
      elements.filterButtons.style.display = "flex";
      elements.pubmedVerifiedBanner.style.display = "flex";
      
      updateStats();
      createCharts();
      elements.tableContainer.scrollIntoView({ behavior: 'smooth' });
    }

    function highlightContent(text, drug) {
      if (!text) return "No abstract available";
      
      const escapedDrug = drug.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      
      const drugRegex = new RegExp(`(${escapedDrug})`, "gi");
      text = text.replace(drugRegex, '<strong class="drug-highlight">$1</strong>');

      const imeRegex = new RegExp(`(${imeTerms.join("|")})`, "gi");
      text = text.replace(imeRegex, '<mark class="ime">$1</mark>');

      const dmeRegex = new RegExp(`(${dmeTerms.join("|")})`, "gi");
      text = text.replace(dmeRegex, '<mark class="dme">$1</mark>');

      const ptRegex = new RegExp(`(${ptTerms.join("|")})`, "gi");
      text = text.replace(ptRegex, '<mark class="pt">$1</mark>');

      const causalityRegex = new RegExp(`(${causalityTerms.join("|")})`, "gi");
      text = text.replace(causalityRegex, '<mark class="causality">$1</mark>');

      return text;
    }

    // ========================
    // Statistics and Charts
    // ========================
    function updateStats() {
      const totalArticles = state.allArticles.length;
      const imeArticles = state.allArticles.filter(a => a.imeCount > 0).length;
      const dmeArticles = state.allArticles.filter(a => a.dmeCount > 0).length;
      const ptArticles = state.allArticles.filter(a => a.ptCount > 0).length;
      
      const sortedIMETerms = Object.entries(state.imeTermCounts)
        .sort((a, b) => b[1] - a[1]);
      const topIMETerm = sortedIMETerms[0]?.[0] || "-";
      
      elements.totalArticles.textContent = totalArticles;
      elements.imeArticles.textContent = imeArticles;
      elements.dmeArticles.textContent = dmeArticles;
      document.getElementById('ptArticles').textContent = ptArticles;
      elements.topIMETerm.textContent = topIMETerm;
      elements.statsDashboard.style.display = "flex";
    }

    function createCharts() {
      Object.values(state.charts).forEach(chart => {
        if (chart) chart.destroy();
      });
      
      // IME Chart
      const sortedIMETerms = Object.entries(state.imeTermCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5);
      
      const imeCtx = elements.imeChart.getContext('2d');
      state.charts.imeChart = new Chart(imeCtx, {
        type: 'bar',
        data: {
          labels: sortedIMETerms.map(item => item[0]),
          datasets: [{
            label: 'Top 5 IME Terms',
            data: sortedIMETerms.map(item => item[1]),
            backgroundColor: state.settings.colors?.ime || config.colors.ime,
            borderColor: darkenColor(state.settings.colors?.ime || config.colors.ime, 20),
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Number of Mentions'
              }
            },
            x: {
              ticks: {
                autoSkip: false,
                maxRotation: 45,
                minRotation: 45
              }
            }
          }
        }
      });

      // DME Chart
      const sortedDMETerms = Object.entries(state.dmeTermCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5);
      
      const dmeCtx = elements.dmeChart.getContext('2d');
      state.charts.dmeChart = new Chart(dmeCtx, {
        type: 'bar',
        data: {
          labels: sortedDMETerms.map(item => item[0]),
          datasets: [{
            label: 'Top 5 DME Terms',
            data: sortedDMETerms.map(item => item[1]),
            backgroundColor: state.settings.colors?.dme || config.colors.dme,
            borderColor: darkenColor(state.settings.colors?.dme || config.colors.dme, 20),
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Number of Mentions'
              }
            },
            x: {
              ticks: {
                autoSkip: false,
                             maxRotation: 45,
                minRotation: 45
              }
            }
          }
        }
      });

      // PT Chart
      const sortedPTTerms = Object.entries(state.ptTermCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5);
      
      const ptCtx = elements.ptChart.getContext('2d');
      state.charts.ptChart = new Chart(ptCtx, {
        type: 'bar',
        data: {
          labels: sortedPTTerms.map(item => item[0]),
          datasets: [{
            label: 'Top 5 PT Terms',
            data: sortedPTTerms.map(item => item[1]),
            backgroundColor: state.settings.colors?.pt || config.colors.pt,
            borderColor: darkenColor(state.settings.colors?.pt || config.colors.pt, 20),
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Number of Mentions'
              }
            },
            x: {
              ticks: {
                autoSkip: false,
                maxRotation: 45,
                minRotation: 45
              }
            }
          }
        }
      });
      
      // Timeline Chart
      createTimelineChart();
      
      // Journal Chart
      createJournalChart();
      
      elements.chartsContainer.style.display = 'block';
    }

    function createTimelineChart() {
      const articlesByMonth = {};
      const minDate = new Date(Math.min(...state.allArticles.map(a => a.pubDate)));
      const maxDate = new Date(Math.max(...state.allArticles.map(a => a.pubDate)));
      
      const currentDate = new Date(minDate);
      currentDate.setDate(1);
      
      while (currentDate <= maxDate) {
        const monthKey = currentDate.toISOString().slice(0, 7);
        articlesByMonth[monthKey] = 0;
        currentDate.setMonth(currentDate.getMonth() + 1);
      }
      
      state.allArticles.forEach(article => {
        const monthKey = article.pubDate.toISOString().slice(0, 7);
        articlesByMonth[monthKey]++;
      });
      
      const labels = Object.keys(articlesByMonth).sort();
      const data = labels.map(month => articlesByMonth[month]);
      
      const timeCtx = elements.timeChart.getContext('2d');
      state.charts.timeChart = new Chart(timeCtx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Articles per Month',
            data: data,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 2,
            tension: 0.1,
            fill: true
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Number of Articles'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Month'
              }
            }
          }
        }
      });
    }

function createJournalChart() {
  const journalData = Object.entries(state.journalCounts || {})
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);

  if (!elements.journalChart) {
    console.error('Journal chart canvas element not found.');
    return;
  }

  const journalCtx = elements.journalChart.getContext('2d');

  // Destroy existing chart instance if it exists
  if (state.charts.journalChart) {
    state.charts.journalChart.destroy();
  }

  state.charts.journalChart = new Chart(journalCtx, {
    type: 'doughnut',
    data: {
      labels: journalData.map(([journal]) => journal),
      datasets: [{
        label: 'Journal Distribution',
        data: journalData.map(([, count]) => count),
        backgroundColor: [
          'rgba(255, 99, 132, 0.7)',
          'rgba(54, 162, 235, 0.7)',
          'rgba(255, 206, 86, 0.7)',
          'rgba(75, 192, 192, 0.7)',
          'rgba(153, 102, 255, 0.7)',
          'rgba(255, 159, 64, 0.7)',
          'rgba(199, 199, 199, 0.7)',
          'rgba(83, 102, 255, 0.7)',
          'rgba(255, 99, 255, 0.7)',
          'rgba(99, 255, 132, 0.7)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'right',
        }
      }
    }
  });
}


    function darkenColor(color, percent) {
      const num = parseInt(color.replace("#", ""), 16);
      const amt = Math.round(2.55 * percent);
      const R = (num >> 16) - amt;
      const G = (num >> 8 & 0x00FF) - amt;
      const B = (num & 0x0000FF) - amt;
      
      return `#${(
        0x1000000 +
        (R < 0 ? 0 : R) * 0x10000 +
        (G < 0 ? 0 : G) * 0x100 +
        (B < 0 ? 0 : B)
      ).toString(16).slice(1)}`;
    }

    // ========================
    // Export Functions
    // ========================
    function downloadExcel() {
      const wb = XLSX.utils.book_new();
      
      // All results sheet
      const allResultsData = state.allArticles.map(article => ({
        PMID: article.pmid,
        Title: article.title,
        Authors: article.authors,
        Journal: article.journal,
        Date: article.date,
        Abstract: article.abstract,
        "IME Count": article.imeCount,
        "DME Count": article.dmeCount,
        "PT Count": article.ptCount,
        "IME Terms": article.imeList.join("; "),
        "DME Terms": article.dmeList.join("; "),
        "PT Terms": article.ptList.join("; "),
        Link: article.link
      }));
      
      const allResultsSheet = XLSX.utils.json_to_sheet(allResultsData);
      XLSX.utils.book_append_sheet(wb, allResultsSheet, "All Results");
      
      // IME articles sheet
      const imeArticles = state.allArticles.filter(a => a.imeCount > 0);
      const imeData = imeArticles.map(article => ({
        PMID: article.pmid,
        Title: article.title,
        Authors: article.authors,
        Journal: article.journal,
        Date: article.date,
        Abstract: article.abstract,
        "IME Count": article.imeCount,
        "DME Count": article.dmeCount,
        "PT Count": article.ptCount,
        "IME Terms": article.imeList.join("; "),
        "DME Terms": article.dmeList.join("; "),
        "PT Terms": article.ptList.join("; "),
        Link: article.link
      }));
      
      const imeSheet = XLSX.utils.json_to_sheet(imeData);
      XLSX.utils.book_append_sheet(wb, imeSheet, "IME Articles");
      
      // DME articles sheet
      const dmeArticles = state.allArticles.filter(a => a.dmeCount > 0);
      const dmeData = dmeArticles.map(article => ({
        PMID: article.pmid,
        Title: article.title,
        Authors: article.authors,
        Journal: article.journal,
        Date: article.date,
        Abstract: article.abstract,
        "IME Count": article.imeCount,
        "DME Count": article.dmeCount,
        "PT Count": article.ptCount,
        "IME Terms": article.imeList.join("; "),
        "DME Terms": article.dmeList.join("; "),
        "PT Terms": article.ptList.join("; "),
        Link: article.link
      }));
      
      const dmeSheet = XLSX.utils.json_to_sheet(dmeData);
      XLSX.utils.book_append_sheet(wb, dmeSheet, "DME Articles");
      
      // PT articles sheet
      const ptArticles = state.allArticles.filter(a => a.ptCount > 0);
      const ptData = ptArticles.map(article => ({
        PMID: article.pmid,
        Title: article.title,
        Authors: article.authors,
        Journal: article.journal,
        Date: article.date,
        Abstract: article.abstract,
        "IME Count": article.imeCount,
        "DME Count": article.dmeCount,
        "PT Count": article.ptCount,
        "IME Terms": article.imeList.join("; "),
        "DME Terms": article.dmeList.join("; "),
        "PT Terms": article.ptList.join("; "),
        Link: article.link
      }));
      
      const ptSheet = XLSX.utils.json_to_sheet(ptData);
      XLSX.utils.book_append_sheet(wb, ptSheet, "PT Articles");
      
      // Event frequency sheet
      const eventCounts = {};
      state.allArticles.forEach(article => {
        article.imeList.forEach(term => {
          eventCounts[term] = (eventCounts[term] || 0) + 1;
        });
        article.dmeList.forEach(term => {
          eventCounts[term] = (eventCounts[term] || 0) + 1;
        });
        article.ptList.forEach(term => {
          eventCounts[term] = (eventCounts[term] || 0) + 1;
        });
      });
      
      const eventData = Object.entries(eventCounts)
        .sort((a, b) => b[1] - a[1])
        .map(([term, count]) => ({
          "Event Term": term,
          "Article Count": count,
          "Event Type": dmeTerms.includes(term.toLowerCase()) ? "DME" : 
                        imeTerms.includes(term.toLowerCase()) ? "IME" : "PT"
        }));
      
      const eventSheet = XLSX.utils.json_to_sheet(eventData);
      XLSX.utils.book_append_sheet(wb, eventSheet, "Event Frequency");
      
      // Journal distribution sheet
      const journalData = Object.entries(state.journalCounts)
        .sort((a, b) => b[1] - a[1])
        .map(([journal, count]) => ({
          Journal: journal,
          "Article Count": count
        }));
      
      const journalSheet = XLSX.utils.json_to_sheet(journalData);
      XLSX.utils.book_append_sheet(wb, journalSheet, "Journal Distribution");
      
      const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
      const drugName = state.currentSearch.drug.replace(/[^a-z0-9]/gi, '_').toLowerCase();
      XLSX.writeFile(wb, `pubmed_${drugName}_results_${timestamp}.xlsx`);
    }

    // ========================
    // Filter Functions
    // ========================
    function filterTable(filterType) {
      const rows = document.querySelectorAll("#resultsTable tbody tr");
      rows.forEach(row => {
        const isIME = row.classList.contains("ime-row");
        const isDME = row.classList.contains("dme-row");
        const isPT = row.classList.contains("pt-row");
        
        switch (filterType) {
          case "all":
            row.style.display = "";
            break;
          case "ime":
            row.style.display = isIME ? "" : "none";
            break;
          case "dme":
            row.style.display = isDME ? "" : "none";
            break;
          case "pt":
            row.style.display = isPT ? "" : "none";
            break;
        }
      });
      
      document.querySelectorAll(".filter-btn").forEach(btn => {
        btn.classList.toggle("active", btn.dataset.filter === filterType);
      });
    }

    // ========================
    // Event Listeners
    // ========================
    function initializeEventListeners() {
      elements.searchButton.addEventListener('click', searchPubMed);
      
      elements.downloadExcelBtn.addEventListener('click', downloadExcel);
      elements.openPubMedBtn.addEventListener('click', () => {
        const pubmedLink = `https://pubmed.ncbi.nlm.nih.gov/?term=${encodeURIComponent(state.currentSearch.term)}&format=abstract`;
        window.open(pubmedLink, "_blank");
      });
      elements.saveSearchBtn.addEventListener('click', () => {
        addToHistory({
          ...state.currentSearch,
          resultCount: state.allArticles.length
        });
        showToast('Search saved to history');
      });
      
      document.querySelectorAll(".filter-btn").forEach(btn => {
        btn.addEventListener("click", () => filterTable(btn.dataset.filter));
      });
      
      elements.datePresetBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          const days = parseInt(btn.dataset.days);
          const toDate = new Date();
          const fromDate = new Date();
          fromDate.setDate(toDate.getDate() - days);
          
          elements.fromDate.value = formatDateForDisplay(fromDate);
          elements.toDate.value = formatDateForDisplay(toDate);
          
          elements.datePresetBtns.forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
        });
      });
      
      elements.tabs.forEach(tab => {
        tab.addEventListener('click', () => switchTab(tab.dataset.tab));
      });
      
      elements.clearHistoryBtn.addEventListener('click', clearHistory);
      elements.saveSettingsBtn.addEventListener('click', saveSettings);
      
      elements.drugName.addEventListener('input', debounce(async (e) => {
        // Implement drug name autocomplete if desired
      }, 300));
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && (e.target === elements.drugName || e.target === elements.fromDate || e.target === elements.toDate)) {
          searchPubMed();
        }
      });
    }

    // FAERS API Configuration
const faersConfig = {
  api: {
    baseUrl: 'https://api.fda.gov/drug/event.json',
    maxResults: 100,
    searchLimit: 1000 // Maximum results to return
  },
  outcomeMapping: {
    'DE': 'Death',
    'LT': 'Life-threatening',
    'HO': 'Hospitalization',
    'DS': 'Disability',
    'CA': 'Congenital anomaly',
    'RI': 'Required intervention',
    'OT': 'Other serious'
  }
};

// FAERS State
const faersState = {
  cases: [],
  stats: {
    total: 0,
    serious: 0,
    deaths: 0
  }
};

// Search FAERS for PubMed results
async function searchFaers() {
  if (state.allArticles.length === 0) {
    showToast('No PubMed results to search in FAERS', 'error');
    return;
  }

  // Get unique drug names and adverse events from PubMed results
  const drugNames = [state.currentSearch.drug.toLowerCase()];
  const adverseEvents = new Set();

  state.allArticles.forEach(article => {
    article.imeList.forEach(term => adverseEvents.add(term.toLowerCase()));
    article.dmeList.forEach(term => adverseEvents.add(term.toLowerCase()));
    article.ptList.forEach(term => adverseEvents.add(term.toLowerCase()));
  });

  if (adverseEvents.size === 0) {
    showToast('No adverse events found in PubMed results to search in FAERS', 'error');
    return;
  }

  try {
    document.getElementById('faersLoading').style.display = 'block';
    document.getElementById('faersResultsContainer').style.display = 'none';
    document.getElementById('faersStats').style.display = 'none';

    // Build search query
    const drugQuery = `patient.drug.openfda.substance_name:"${drugNames[0]}"`;
    const eventQuery = Array.from(adverseEvents)
      .map(event => `patient.reaction.reactionmeddrapt:"${event}"`)
      .join('+OR+');

    const searchUrl = `${faersConfig.api.baseUrl}?search=(${drugQuery})+AND+(${eventQuery})&limit=${faersConfig.api.maxResults}`;

    const response = await fetch(searchUrl);
    if (!response.ok) {
      throw new Error(`FAERS API error: ${response.status}`);
    }

    const data = await response.json();
    faersState.cases = data.results || [];
    updateFaersStats();
    displayFaersResults();

  } catch (error) {
    console.error('FAERS search error:', error);
    showToast(`Error searching FAERS: ${error.message}`, 'error');
  } finally {
    document.getElementById('faersLoading').style.display = 'none';
  }
}

function updateFaersStats() {
  faersState.stats = {
    total: faersState.cases.length,
    serious: faersState.cases.filter(caseItem => caseItem.serious === '1').length,
    deaths: faersState.cases.filter(caseItem => caseItem.seriousnessdeath === '1').length
  };

  document.getElementById('faersTotalCases').textContent = faersState.stats.total;
  document.getElementById('faersSeriousCases').textContent = faersState.stats.serious;
  document.getElementById('faersDeathCases').textContent = faersState.stats.deaths;
  document.getElementById('faersStats').style.display = 'flex';
}

function displayFaersResults() {
  const tableBody = document.querySelector('#faersResultsTable tbody');
  tableBody.innerHTML = '';

  if (faersState.cases.length === 0) {
    tableBody.innerHTML = '<tr><td colspan="6" style="text-align: center;">No matching FAERS cases found</td></tr>';
    document.getElementById('faersResultsContainer').style.display = 'block';
    return;
  }

  faersState.cases.forEach(caseItem => {
    const row = document.createElement('tr');
    if (caseItem.serious === '1') row.classList.add('faers-serious');
    if (caseItem.seriousnessdeath === '1') row.classList.add('faers-death');
    row.classList.add('faers-case');

    // Patient details
    const patient = caseItem.patient;
    const patientDetails = `
      <strong>Age:</strong> ${patient.patientage || 'Unknown'}<br>
      <strong>Sex:</strong> ${patient.patientsex || 'Unknown'}<br>
      <strong>Weight:</strong> ${patient.patientweight || 'Unknown'} kg
    `;

    // Adverse events
    const events = patient.reaction.map(r => {
      const isSerious = r.reactionoutcome && Object.values(faersConfig.outcomeMapping).includes(r.reactionoutcome);
      return `<div class="faers-event-item ${isSerious ? 'faers-event-serious' : ''}">${r.reactionmeddrapt}</div>`;
    }).join('');

    // Drugs
    const drugs = patient.drug.map(d => {
      const isSuspect = d.drugcharacterization === '1';
      return `<div class="faers-drug-item ${isSuspect ? 'faers-drug-suspect' : ''}">${d.medicinalproduct} (${isSuspect ? 'Suspect' : 'Concomitant'})</div>`;
    }).join('');

    // Outcome
    const outcomes = [];
    if (caseItem.seriousnessdeath === '1') outcomes.push('Death');
    if (caseItem.seriousnesshospitalization === '1') outcomes.push('Hospitalization');
    if (caseItem.seriousnessdisabling === '1') outcomes.push('Disability');
    if (caseItem.seriousnesslifethreatening === '1') outcomes.push('Life-threatening');
    if (caseItem.seriousnesscongenitalanomali === '1') outcomes.push('Congenital anomaly');
    if (outcomes.length === 0 && caseItem.serious === '1') outcomes.push('Other serious');

    const outcomeDisplay = outcomes.length > 0 
      ? `<span class="faers-outcome outcome-${outcomes[0].toLowerCase().replace(' ', '-')}">${outcomes.join(', ')}</span>`
      : 'Non-serious';

    row.innerHTML = `
      <td>${caseItem.safetyreportid}</td>
      <td>${patientDetails}</td>
      <td><div class="faers-event-list">${events}</div></td>
      <td><div class="faers-drug-list">${drugs}</div></td>
      <td>${outcomeDisplay}</td>
      <td>
        <button class="view-faers-case" data-id="${caseItem.safetyreportid}">
          <i class="fas fa-download"></i> Download XML
        </button>
      </td>
    `;

    tableBody.appendChild(row);
  });

  // Add event listeners to download buttons
  document.querySelectorAll('.view-faers-case').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      downloadFaersCase(btn.dataset.id);
    });
  });

  // Add click handler to view case details
  document.querySelectorAll('.faers-case').forEach(row => {
    row.addEventListener('click', () => {
      const caseId = row.cells[0].textContent;
      viewFaersCaseDetails(caseId);
    });
  });

  document.getElementById('faersResultsContainer').style.display = 'block';
}

function downloadFaersCase(caseId) {
  const caseUrl = `https://api.fda.gov/drug/event.json?search=safetyreportid:${caseId}`;
  
  fetch(caseUrl)
    .then(response => response.json())
    .then(data => {
      if (data.results && data.results.length > 0) {
        const caseData = data.results[0];
        const xmlData = jsonToXml(caseData);
        
        const blob = new Blob([xmlData], { type: 'application/xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `faers_case_${caseId}.xml`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showToast(`Case ${caseId} downloaded`, 'success');
      } else {
        throw new Error('Case not found');
      }
    })
    .catch(error => {
      console.error('Error downloading FAERS case:', error);
      showToast(`Error downloading case: ${error.message}`, 'error');
    });
}

function viewFaersCaseDetails(caseId) {
  const caseItem = faersState.cases.find(c => c.safetyreportid === caseId);
  if (!caseItem) return;

  // Create a modal or expand the row to show more details
  // This is a simplified version - you might want to implement a proper modal
  alert(`Detailed view for case ${caseId}\n\nPatient age: ${caseItem.patient.patientage || 'Unknown'}\nSex: ${caseItem.patient.patientsex || 'Unknown'}`);
}

function jsonToXml(jsonData) {
  // Simplified XML conversion - you might want to use a proper library for production
  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n<case>\n';
  
  for (const key in jsonData) {
    if (typeof jsonData[key] === 'object') {
      xml += `  <${key}>\n`;
      for (const subKey in jsonData[key]) {
        xml += `    <${subKey}>${escapeXml(JSON.stringify(jsonData[key][subKey]))}</${subKey}>\n`;
      }
      xml += `  </${key}>\n`;
    } else {
      xml += `  <${key}>${escapeXml(jsonData[key])}</${key}>\n`;
    }
  }
  
  xml += '</case>';
  return xml;
}

function escapeXml(unsafe) {
  if (!unsafe) return '';
  return unsafe.toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;');
}
    
    // ========================
    // Initialization
    // ========================
    function initialize() {
      loadSettings();
      loadHistory();
      initializeDatePickers();
      initializeEventListeners();
      elements.datePresetBtns[3].click();
    }

    // Add FAERS search button event listener
document.getElementById('searchFaersBtn').addEventListener('click', searchFaers);
    
    // Start the application
    initialize();
  </script>
</body>
</html>